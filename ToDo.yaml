openapi: 3.0.0
info:
  version: 1.0.0
  title: ToDo Application
  description: This is my first todo app API Spec


paths:
  /todo:
    get:
      summary: Get me the list of todos
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum:
              - OPEN
              - DONE
          required: true
          description: Get todos by status
      tags: [ ToDo Functions]
      responses:
        "200":
          description: This is success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoList"
        default:
          $ref: '#/components/responses/TodoError'
    post:
      summary: Create new todo
      tags: [ ToDo Functions ]
      requestBody:
        description: Required Name and Date
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTodo"
      responses:
        "200":
          description: This is success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoList"
        default:
          $ref: '#/components/responses/CreateTodoError'
  /todo/{id}:
    put:
      summary: Change the status, name, dueDate or color of todo by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the todo to  put
      requestBody:
        description: Change the status, name, dueDate or color of todo by id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditTodo"
      tags: [ ToDo Functions ]
      responses:
        "200":
          description: this is success response
          content:
            application/json:
              schema:
                '$ref': "#/components/schemas/TodoList"
        default:
          $ref: '#/components/responses/EditTodoError'
    delete:
      summary: Delete todo by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the todo to delete
      tags: [ ToDo Functions ]
      responses:
        "204":
          description: Deleted
        default:
          $ref: '#/components/responses/DeleteError'
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of todo to get the task
      tags: [ Task Functions ]
      responses:
        "200":
          description: This is success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoDetails"
        default:
          $ref: '#/components/responses/TaskError'
  /todo/{id}/task:
    post:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the task to post
      tags: [ Task Functions ]
      requestBody:
        description: New Task in Todo
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTask"
      responses:
        "200":
          description: This is success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TasksList"
        default:
          $ref: '#/components/responses/CreateTaskError'

  /todo/{id}/task/{taskId}:
    put:
      summary: Change name and status of task by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the todo to put
        - in: path
          name: taskId
          schema:
            type: integer
          required: true
          description: Numeric ID of the task to put

      requestBody:
        description: Change name and status of task by id
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditTask"
      tags: [ Task Functions ]
      responses:
        "200":
          description: this is success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TasksList"
        default:
          $ref: '#/components/responses/EditTaskError'
    delete:
      summary: Delete task by id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the todo to delete
        - in: path
          name: taskId
          schema:
            type: integer
          required: true
          description: Numeric ID of the task to delete
      tags: [ Task Functions ]
      responses:
        "204":
          description: Deleted
        default:
          $ref: '#/components/responses/DeleteError'

components:
  schemas:
    TodoList:
      type: array
      items:
        $ref: "#/components/schemas/Todo"
    Todo:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: Groceries
        dueDate:
          type: string
          format: date
        taskCount:
          type: string
          example: "2"
        status:
          type: string
          enum:
            - OPEN
            - CLOSED
      required:
        - name
        - dueDate
        - id
        - taskCount
        - status
        - color

    TodoDetails:
      type: object
      properties:
        id:
          type: string
          example: 123
        name:
          type: string
          example: Groceries
        dueDate:
          type: string
          format: date
        taskCount:
          type: string
          example: "2"
        status:
          type: string
          enum:
            - OPEN
            - CLOSED
        tasksList:
          type: array
          items:
            $ref: "#/components/schemas/Task"
      required:
        - name
        - dueDate
        - id
        - taskCount
        - status
        - color

    CreateTodo:
      type: object
      properties:
        name:
          type: string
          example: Groceries
        dueDate:
          type: string
          format: date
        color:
          $ref: "#/components/schemas/Color"
      required:
        - name
        - dueDate
    EditTodo:
      type: object
      properties:
        name:
          type: string
          example: Groceries
        dueDate:
          type: string
          format: date
        color:
          $ref: "#/components/schemas/Color"
        status:
          type: string
          enum:
            - OPEN
            - CLOSED
      required:
        - name
        - dueDate
        - id
    TasksList:
      type: array
      items:
        $ref: "#/components/schemas/Task"

    Task:
      type: object
      properties:
        name:
          type: string
          example: Apple
        id:
          type: integer
          example: abc1
        status:
          type: string
          enum:
            - OPEN
            - CLOSED
    CreateTask:
      type: object
      properties:
        name:
          type: string
          example: Apple
      required:
        - name
    EditTask:
      type: object
      properties:
        name:
          type: string
          example: Apples
        taskID:
          type: integer
          example: abc1
        status:
          type: string
          enum:
            - OPEN
            - CLOSED
      required:
        - name
        - taskID
    Color:
      type: object
      properties:
        name:
          type: string
          example: Cosmos
        hexCode:
          type: string
          example: '#FFCCCC'

    TodoAppApiError:
      type: object
      properties:
        error:
          type: string
        scope:
          type: string
        description:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
      required:
        - error
    Errors:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/TodoAppApiError"

  responses:
    TodoError:
      description: Defined possible errors, as error and scope pairs
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            errors:
              - error: SERVER_ERROR
                description: Internal server error. Failed to load API.
    CompletedTodoError:
      description: Defined possible errors, as error and scope pairs
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            errors:
              - error: ID_NOT_FOUND
              - scope: id
              - description: The provided ID is incorrect or does not exist.
    CreateTodoError:
      description: Defined possible errors, as error and scope pairs
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            errors:
              - error: FIELD_MISSING
                scope: dueDate
                description: dueDate is missing.
              - error: FIELD_MISSING
                scope: name
                description: Name is missing.
              - error: FIELD_INVALID
                scope: color
                description: wrong color
              - error: FIELD_INVALID
                scope: status
                description: Internal server error. Failed to load API.
    EditTodoError:
      description: Defined possible errors, as error and scope pairs
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            errors:
              - error: FIELD_MISSING
                scope: dueDate
                description: dueDate is missing.
              - error: FIELD_MISSING
                scope: name
                description: Name is missing.
              - error: FIELD_INVALID
                scope: color
                description: wrong color
              - error: ID_NOT_FOUND
                scope: id
                description: The provided ID is incorrect or does not exist.
              - error: FIELD_INVALID
                scope: status
                description: wrong color
    TaskError:
      description: Defined possible errors, as error and scope pairs
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            errors:
              - error: TASK_ID_NOT_FOUND
                scope: id
                description: The provided ID is incorrect or does not exist.
              - error: SERVER_ERROR
                description: Internal server error. Failed to load API.
    CreateTaskError:
      description: Defined possible errors, as error and scope pairs
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            errors:
              - error: FIELD_MISSING
                scope: name
                description: Name is missing.
              - error: FIELD_INVALID
                scope: status
                description: Invalid status of the task.
    EditTaskError:
      description: Defined possible errors, as error and scope pairs
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            errors:
              - error: FIELD_MISSING
                scope: name
                description: Name is missing.
              - error: ID_NOT_FOUND
                scope: id
                description: The provided ID is incorrect or does not exist.
              - error: FIELD_INVALID
                scope: status
                description: Invalid status of the task.
    DeleteError:
      description: Defined possible errors, as error and scope pairs
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Errors"
          example:
            errors:
              - error: ID_NOT_FOUND
                scope: id
                description: The provided ID is incorrect or does not exist.




